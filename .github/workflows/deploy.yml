name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-24.04

    steps:
        - name: Checkout Code
          uses: actions/checkout@v3
  
        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: Install Dependencies
          run: npm --prefix frontend install
  
        - name: Run Tests
          run: npm --prefix frontend run test

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Ensure it stops on failure
            set -e
            # Ensure known hosts for GitHub
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts

            # Navigate to your project directory
            if [ ! -d "${{ secrets.PROJECT_PATH }}" ]; then
            # Clone the repo if not already cloned
                git clone git@github.com:madfcat/corsearch-assignment.git ${{ secrets.PROJECT_PATH }}
            fi
            cd ${{ secrets.PROJECT_PATH }}
            echo "GRAPHQL_API_TOKEN=${{ secrets.GRAPHQL_API_TOKEN }}" > .env
            echo "GRAPHQL_ENDPOINT=${{ secrets.GRAPHQL_ENDPOINT }}" >> .env
            echo "VITE_HOST=${{ secrets.VITE_HOST }}" >> .env
            echo "GEOCODING_ENDPOINT=${{ secrets.GEOCODING_ENDPOINT }}" >> .env

            # Pull the latest changes
            git pull origin main

            
            # Check if 'make' is installed
            if ! command -v make &> /dev/null; then
              # Update package list
              sudo apt update
              echo "make is not installed. Installing..."
              sudo apt install build-essential
            else
              echo "make is already installed."
            fi

            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed. Installing Docker..."

              # Uninstall all conflicting packages
              for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done

              # Add Docker's official GPG key:
              sudo apt-get update
              sudo apt-get install ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc

              # Add the repository to Apt sources:
              echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update

              #Install the Docker packages.
              sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi

            # Rebuild and restart the Docker Compose project
            make clean
            make prod
          EOF
